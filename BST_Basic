#include <iostream>
using namespace std;

struct Node
{
	Node* parent;
	Node* right;
	Node* left;

	double value;

	Node()
	{
		value = 0;
		right = nullptr;
		left = nullptr;
		parent = nullptr;
	}
};

class BinaryTree
{
private:
	int size = 0;
	Node* parentRoot = nullptr;

	void Add(double value, Node* (&root))
	{
		if (root == nullptr)
		{
			root = new Node;
			root->value = value;
			size++;
		}
		else
		{
			if (value >= root->value)
			{
				Add(value, root->right);
				if (root->right->parent == nullptr) root->right->parent = root;
			}
			else
			{
				Add(value, root->left);
				if (root->left->parent == nullptr) root->left->parent = root;
			}
		}
	}

	void InorderWalk(Node* (&root))
	{
		if (root == nullptr)
		{
			return;
		}
		else
		{
			InorderWalk(root->left);
			cout << root->value << ' ';
			InorderWalk(root->right);
		}
	}

	double Successor(Node* root)
	{
		if (root->right) return MinRoot(root->right)->value;

		Node* temp = root->parent;

		while (temp != nullptr && root == temp->right)
		{
			root = temp;
			temp = temp->parent;
		}

		if (temp == nullptr) return -1;
		return temp->value;
	}

	double Predecessor(Node* root)
	{
		if (root->left) return MaxRoot(root->left)->value;

		Node* temp = root->parent;

		while (temp != nullptr && root == temp->left)
		{
			root = temp;
			temp = temp->parent;
		}
		
		if (temp == nullptr) return -1;
		return temp->value;
	}

	Node* MinRoot(Node* root)
	{
		if (root->left == nullptr) return root;
		return MinRoot(root->left);
	}

	Node* MaxRoot(Node* root) 
	{
		if (root->right == nullptr) return root;
		return MaxRoot(root->right);
	}

	Node* Search(double value, Node* (&root))
	{
		if (root == nullptr) return nullptr;

		if (value == root->value) return root;
		else if (value < root->value) Search(value, root->left);
		else Search(value, root->right);
	}

	Node* Remove(Node* (&root), double value)
	{
		if (root == nullptr) return root;

		if (value < root->value)
		{
			root->left = Remove(root->left, value);
		}
		else if (value > root->value)
		{
			root->right = Remove(root->right, value);
		}
		else if (root->left && root->right)
		{
			root->value = MinRoot(root->right)->value;
			root->right = Remove(root->right, root->value);
		}
		else
		{
			if (root->left) root = root->left;
			else if (root->right) root = root->right;
			else root = nullptr;
		}

		return root;
	}

	void CreatePath(Node* root, double value, int& index, double* path)
	{
		if (root == nullptr) return;

		if (value == root->value)
		{
			path[index] = root->value;
			index++;
		}
		else if (value < root->value)
		{
			path[index] = root->value;
			index++;
			CreatePath(root->left, value, index, path);
		}
		else
		{
			path[index] = root->value;
			index++;
			CreatePath(root->right, value, index, path);
		}
	}

	double* FindFloor(Node* parentRoot, double floor, double ceil)
	{
		int index = 0;
		for (int i = floor; i < ceil + 1; ++i)
		{
			if (Search(i, parentRoot) != nullptr)
			{
				double* smallestRoot = new double[getSize()];
				CreatePath(parentRoot, Search(i, parentRoot)->value, index, smallestRoot);

				double* result = new double[index + 1];

				result[0] = index;
				for (int i = 1; i < index + 1; i++)
				{
					result[i] = smallestRoot[i - 1];
				}
				return result;
			}
		}

		double* notFound = new double[1];
		notFound[0] = -1;
		return notFound;
	}
	double* FindCeil(Node* parentRoot, double floor, double ceil)
	{
		int index = 0;
		for (int i = ceil; i > floor - 1; --i)
		{
			if (Search(i, parentRoot) != nullptr)
			{
				double* biggestRoot = new double[getSize()];
				CreatePath(parentRoot, Search(i, parentRoot)->value, index, biggestRoot);

				double* result = new double[index + 1];

				result[0] = index;
				for (int i = 1; i < index + 1; i++)
				{
					result[i] = biggestRoot[i - 1];
				}
				return result;
			}
		}

		double* notFound = new double[1];
		notFound[0] = -1;
		return notFound;
	}

	double** FindRange(Node* parentRoot, double floor, double ceil)
	{
		double* lowestPath = FindFloor(parentRoot, floor, ceil);
		double* biggestPath = FindCeil(parentRoot, floor, ceil);

		double** array = new double*[2];
		for (int i = 0; i < 2; ++i)
		{
			array[i] = new double[getSize()];
		}
		array[0] = lowestPath;
		array[1] = biggestPath;

		return array;
	}

public:
	int getSize()
	{
		return size;
	}

	void Add(double value)
	{
		Add(value, parentRoot);
	}

	void InorderWalk()
	{
		InorderWalk(parentRoot);
	}

	void Remove(double value)
	{
		Remove(parentRoot, value);
	}
	
	Node* Search(double value)
	{
		Search(value, parentRoot);
	}

	double Successor(double value)
	{
		Node* temp = Search(value, parentRoot);
		if (temp == nullptr) return -1;
		return Successor(temp);
	}

	double Predecessor(double value)
	{
		Node* temp = Search(value, parentRoot);
		if (temp == nullptr) return -1;
		return Predecessor(temp);
	}

	double** FindRange(double floor, double ceil)
	{
		return FindRange(parentRoot, floor, ceil);
	}
};


int main()
{
	BinaryTree tree;
	tree.Add(30);
	tree.Add(40);
	tree.Add(50);
	tree.Add(24);
	tree.Add(8);
	tree.Add(58);
	tree.Add(48);
	tree.Add(26);
	tree.Add(11);
	tree.Add(13);

	double** array = tree.FindRange(8, 48);

	for (int i = 1; i < array[0][0] + 1; i++)
	{
		cout << array[0][i] << ' ';
	}

	cout << endl;

	for (int i = 1; i < array[1][0] + 1; i++)
	{
		cout << array[1][i] << ' ';
	}

	cout << endl;

	for (int i = 0; i < 2; ++i) {
		delete[] array[i];
	}
	delete[] array;

	/*tree.InorderWalk();

	cout << endl << tree.Predecessor(24) << endl;
	cout << tree.Successor(24);*/
}
